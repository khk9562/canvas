/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nwsapi";
exports.ids = ["vendor-chunks/nwsapi"];
exports.modules = {

/***/ "(ssr)/./node_modules/nwsapi/src/nwsapi.js":
/*!*******************************************!*\
  !*** ./node_modules/nwsapi/src/nwsapi.js ***!
  \*******************************************/
/***/ (function(module) {

eval("/*\n * Copyright (C) 2007-2023 Diego Perini\n * All rights reserved.\n *\n * nwsapi.js - Fast CSS Selectors API Engine\n *\n * Author: Diego Perini <diego.perini at gmail com>\n * Version: 2.2.7\n * Created: 20070722\n * Release: 20230701\n *\n * License:\n *  http://javascript.nwbox.com/nwsapi/MIT-LICENSE\n * Download:\n *  http://javascript.nwbox.com/nwsapi/nwsapi.js\n */\n\n(function Export(global, factory) {\n\n  'use strict';\n\n  if (true) {\n    module.exports = factory;\n  } else {}\n\n})(this, function Factory(global, Export) {\n\n  var version = 'nwsapi-2.2.7',\n\n  doc = global.document,\n  root = doc.documentElement,\n  slice = Array.prototype.slice,\n\n  HSP = '[\\\\x20\\\\t]',\n  VSP = '[\\\\r\\\\n\\\\f]',\n  WSP = '[\\\\x20\\\\t\\\\r\\\\n\\\\f]',\n\n  CFG = {\n    // extensions\n    operators: '[~*^$|]=|=',\n    combinators: '[\\\\x20\\\\t>+~](?=[^>+~])'\n  },\n\n  NOT = {\n    // not enclosed in double/single/parens/square\n    double_enc: '(?=(?:[^\"]*[\"][^\"]*[\"])*[^\"]*$)',\n    single_enc: \"(?=(?:[^']*['][^']*['])*[^']*$)\",\n    parens_enc: '(?![^\\\\x28]*\\\\x29)',\n    square_enc: '(?![^\\\\x5b]*\\\\x5d)'\n  },\n\n  REX = {\n    // regular expressions\n    HasEscapes: RegExp('\\\\\\\\'),\n    HexNumbers: RegExp('^[0-9a-fA-F]'),\n    EscOrQuote: RegExp('^\\\\\\\\|[\\\\x22\\\\x27]'),\n    RegExpChar: RegExp('(?!\\\\\\\\)[\\\\\\\\^$.,*+?()[\\\\]{}|\\\\/]', 'g'),\n    TrimSpaces: RegExp('^' + WSP + '+|' + WSP + '+$|' + VSP, 'g'),\n    SplitGroup: RegExp('(\\\\([^)]*\\\\)|\\\\[[^[]*\\\\]|\\\\\\\\.|[^,])+', 'g'),\n    CommaGroup: RegExp('(\\\\s*,\\\\s*)' + NOT.square_enc + NOT.parens_enc, 'g'),\n    FixEscapes: RegExp('\\\\\\\\([0-9a-fA-F]{1,6}' + WSP + '?|.)|([\\\\x22\\\\x27])', 'g'),\n    CombineWSP: RegExp('[\\\\n\\\\r\\\\f\\\\x20]+' + NOT.single_enc + NOT.double_enc, 'g'),\n    TabCharWSP: RegExp('(\\\\x20?\\\\t+\\\\x20?)' + NOT.single_enc + NOT.double_enc, 'g'),\n    PseudosWSP: RegExp('\\\\s+([-+])\\\\s+' + NOT.square_enc, 'g')\n  },\n\n  STD = {\n    combinator: RegExp('\\\\s?([>+~])\\\\s?', 'g'),\n    apimethods: RegExp('^(?:[a-z]+|\\\\*)\\\\|', 'i'),\n    namespaces: RegExp('(\\\\*|[a-z]+)\\\\|[-a-z]+', 'i')\n  },\n\n  GROUPS = {\n    // pseudo-classes requiring parameters\n    linguistic: '(dir|lang)(?:\\\\x28\\\\s?([-\\\\w]{2,})\\\\s?\\\\x29)',\n    logicalsel: '(is|where|matches|not|has)(?:\\\\x28\\\\s?(\\\\[([^\\\\[\\\\]]*)\\\\]|[^()\\\\[\\\\]]*|.*)\\\\s?\\\\x29)',\n    treestruct: '(nth(?:-last)?(?:-child|-of-type))(?:\\\\x28\\\\s?(even|odd|(?:[-+]?\\\\d*)(?:n\\\\s?[-+]?\\\\s?\\\\d*)?)\\\\s?\\\\x29)',\n    // pseudo-classes not requiring parameters\n    locationpc: '(any-link|link|visited|target)\\\\b',\n    useraction: '(hover|active|focus-within|focus)\\\\b',\n    structural: '(root|empty|(?:(?:first|last|only)(?:-child|-of-type)))\\\\b',\n    inputstate: '(enabled|disabled|read-only|read-write|placeholder-shown|default)\\\\b',\n    inputvalue: '(checked|indeterminate|required|optional|valid|invalid|in-range|out-of-range)\\\\b',\n    // pseudo-classes for parsing only selectors\n    pseudo_nop: '(autofill|-webkit-autofill)\\\\b',\n    // pseudo-elements starting with single colon (:)\n    pseudo_sng: '(after|before|first-letter|first-line)\\\\b',\n    // pseudo-elements starting with double colon (::)\n    pseudo_dbl: ':(after|before|first-letter|first-line|selection|placeholder|-webkit-[-a-zA-Z0-9]{2,})\\\\b'\n  },\n\n  Patterns = {\n    // pseudo-classes\n    treestruct: RegExp('^:(?:' + GROUPS.treestruct + ')(.*)', 'i'),\n    structural: RegExp('^:(?:' + GROUPS.structural + ')(.*)', 'i'),\n    linguistic: RegExp('^:(?:' + GROUPS.linguistic + ')(.*)', 'i'),\n    useraction: RegExp('^:(?:' + GROUPS.useraction + ')(.*)', 'i'),\n    inputstate: RegExp('^:(?:' + GROUPS.inputstate + ')(.*)', 'i'),\n    inputvalue: RegExp('^:(?:' + GROUPS.inputvalue + ')(.*)', 'i'),\n    locationpc: RegExp('^:(?:' + GROUPS.locationpc + ')(.*)', 'i'),\n    logicalsel: RegExp('^:(?:' + GROUPS.logicalsel + ')(.*)', 'i'),\n    pseudo_nop: RegExp('^:(?:' + GROUPS.pseudo_nop + ')(.*)', 'i'),\n    pseudo_sng: RegExp('^:(?:' + GROUPS.pseudo_sng + ')(.*)', 'i'),\n    pseudo_dbl: RegExp('^:(?:' + GROUPS.pseudo_dbl + ')(.*)', 'i'),\n    // combinator symbols\n    children: RegExp('^' + WSP + '?\\\\>' + WSP + '?(.*)'),\n    adjacent: RegExp('^' + WSP + '?\\\\+' + WSP + '?(.*)'),\n    relative: RegExp('^' + WSP + '?\\\\~' + WSP + '?(.*)'),\n    ancestor: RegExp('^' + WSP + '+(.*)'),\n   // universal & namespace\n   universal: RegExp('^\\\\*(.*)'),\n   namespace: RegExp('^(\\\\w+|\\\\*)?\\\\|(.*)')\n  },\n\n  // regexp to aproximate detection of RTL languages (Arabic)\n  RTL = RegExp('^[\\\\u0591-\\\\u08ff\\\\ufb1d-\\\\ufdfd\\\\ufe70-\\\\ufefc ]+$'),\n\n  // emulate firefox error strings\n  qsNotArgs = 'Not enough arguments',\n  qsInvalid = ' is not a valid selector',\n\n  // detect structural pseudo-classes in selectors\n  reNthElem = RegExp('(:nth(?:-last)?-child)', 'i'),\n  reNthType = RegExp('(:nth(?:-last)?-of-type)', 'i'),\n\n  // placeholder for global regexp\n  reOptimizer,\n  reValidator,\n\n  // special handling configuration flags\n  Config = {\n    IDS_DUPES: true,\n    NONDIGITS: true,\n    LOGERRORS: true,\n    VERBOSITY: true\n  },\n\n  NAMESPACE,\n  QUIRKS_MODE,\n  HTML_DOCUMENT,\n\n  ATTR_STD_OPS = {\n    '=': 1, '^=': 1, '$=': 1, '|=': 1, '*=': 1, '~=': 1\n  },\n\n  HTML_TABLE = {\n    'accept': 1, 'accept-charset': 1, 'align': 1, 'alink': 1, 'axis': 1,\n    'bgcolor': 1, 'charset': 1, 'checked': 1, 'clear': 1, 'codetype': 1, 'color': 1,\n    'compact': 1, 'declare': 1, 'defer': 1, 'dir': 1, 'direction': 1, 'disabled': 1,\n    'enctype': 1, 'face': 1, 'frame': 1, 'hreflang': 1, 'http-equiv': 1, 'lang': 1,\n    'language': 1, 'link': 1, 'media': 1, 'method': 1, 'multiple': 1, 'nohref': 1,\n    'noresize': 1, 'noshade': 1, 'nowrap': 1, 'readonly': 1, 'rel': 1, 'rev': 1,\n    'rules': 1, 'scope': 1, 'scrolling': 1, 'selected': 1, 'shape': 1, 'target': 1,\n    'text': 1, 'type': 1, 'valign': 1, 'valuetype': 1, 'vlink': 1\n  },\n\n  Combinators = { },\n\n  Selectors = { },\n\n  Operators = {\n     '=': { p1: '^',\n            p2: '$',\n            p3: 'true' },\n    '^=': { p1: '^',\n            p2: '',\n            p3: 'true' },\n    '$=': { p1: '',\n            p2: '$',\n            p3: 'true' },\n    '*=': { p1: '',\n            p2: '',\n            p3: 'true' },\n    '|=': { p1: '^',\n            p2: '(-|$)',\n            p3: 'true' },\n    '~=': { p1: '(^|\\\\s)',\n            p2: '(\\\\s|$)',\n            p3: 'true' }\n  },\n\n  concatCall =\n    function(nodes, callback) {\n      var i = 0, l = nodes.length, list = Array(l);\n      while (l > i) {\n        if (false === callback(list[i] = nodes[i])) break;\n        ++i;\n      }\n      return list;\n    },\n\n  concatList =\n    function(list, nodes) {\n      var i = -1, l = nodes.length;\n      while (l--) { list[list.length] = nodes[++i]; }\n      return list;\n    },\n\n  documentOrder =\n    function(a, b) {\n      if (!hasDupes && a === b) {\n        hasDupes = true;\n        return 0;\n      }\n      return a.compareDocumentPosition(b) & 4 ? -1 : 1;\n    },\n\n  hasDupes = false,\n\n  unique =\n    function(nodes) {\n      var i = 0, j = -1, l = nodes.length + 1, list = [ ];\n      while (--l) {\n        if (nodes[i++] === nodes[i]) continue;\n        list[++j] = nodes[i - 1];\n      }\n      hasDupes = false;\n      return list;\n    },\n\n  switchContext =\n    function(context, force) {\n      var oldDoc = doc;\n      doc = context.ownerDocument || context;\n      if (force || oldDoc !== doc) {\n        // force a new check for each document change\n        // performed before the next select operation\n        root = doc.documentElement;\n        HTML_DOCUMENT = isHTML(doc);\n        QUIRKS_MODE = HTML_DOCUMENT &&\n          doc.compatMode.indexOf('CSS') < 0;\n        NAMESPACE = root && root.namespaceURI;\n        Snapshot.doc = doc;\n        Snapshot.root = root;\n      }\n      return (Snapshot.from = context);\n    },\n\n  // convert single codepoint to UTF-16 encoding\n  codePointToUTF16 =\n    function(codePoint) {\n      // out of range, use replacement character\n      if (codePoint < 1 || codePoint > 0x10ffff ||\n        (codePoint > 0xd7ff && codePoint < 0xe000)) {\n        return '\\\\ufffd';\n      }\n      // javascript strings are UTF-16 encoded\n      if (codePoint < 0x10000) {\n        var lowHex = '000' + codePoint.toString(16);\n        return '\\\\u' + lowHex.substr(lowHex.length - 4);\n      }\n      // supplementary high + low surrogates\n      return '\\\\u' + (((codePoint - 0x10000) >> 0x0a) + 0xd800).toString(16) +\n             '\\\\u' + (((codePoint - 0x10000) % 0x400) + 0xdc00).toString(16);\n    },\n\n  // convert single codepoint to string\n  stringFromCodePoint =\n    function(codePoint) {\n      // out of range, use replacement character\n      if (codePoint < 1 || codePoint > 0x10ffff ||\n        (codePoint > 0xd7ff && codePoint < 0xe000)) {\n        return '\\ufffd';\n      }\n      if (codePoint < 0x10000) {\n        return String.fromCharCode(codePoint);\n      }\n      return String.fromCodePoint ?\n        String.fromCodePoint(codePoint) :\n        String.fromCharCode(\n          ((codePoint - 0x10000) >> 0x0a) + 0xd800,\n          ((codePoint - 0x10000) % 0x400) + 0xdc00);\n    },\n\n  // convert escape sequence in a CSS string or identifier\n  // to javascript string with javascript escape sequences\n  convertEscapes =\n    function(str) {\n      return REX.HasEscapes.test(str) ?\n        str.replace(REX.FixEscapes,\n          function(substring, p1, p2) {\n            // unescaped \" or '\n            return p2 ? '\\\\' + p2 :\n              // javascript strings are UTF-16 encoded\n              REX.HexNumbers.test(p1) ? codePointToUTF16(parseInt(p1, 16)) :\n              // \\' \\\"\n              REX.EscOrQuote.test(p1) ? substring :\n              // \\g \\h \\. \\# etc\n              p1;\n          }\n        ) : str;\n    },\n\n  // convert escape sequence in a CSS string or identifier\n  // to javascript string with characters representations\n  unescapeIdentifier =\n    function(str) {\n      return REX.HasEscapes.test(str) ?\n        str.replace(REX.FixEscapes,\n          function(substring, p1, p2) {\n            // unescaped \" or '\n            return p2 ? p2 :\n              // javascript strings are UTF-16 encoded\n              REX.HexNumbers.test(p1) ? stringFromCodePoint(parseInt(p1, 16)) :\n              // \\' \\\"\n              REX.EscOrQuote.test(p1) ? substring :\n              // \\g \\h \\. \\# etc\n              p1;\n          }\n        ) : str;\n    },\n\n  method = {\n    '#': 'getElementById',\n    '*': 'getElementsByTagName',\n    '|': 'getElementsByTagNameNS',\n    '.': 'getElementsByClassName'\n    },\n\n  compat = {\n    '#': function(c, n) { REX.HasEscapes.test(n) && (n = unescapeIdentifier(n)); return function(e, f) { return byId(n, c); }; },\n    '*': function(c, n) { REX.HasEscapes.test(n) && (n = unescapeIdentifier(n)); return function(e, f) { return byTag(n, c); }; },\n    '|': function(c, n) { REX.HasEscapes.test(n) && (n = unescapeIdentifier(n)); return function(e, f) { return byTag(n, c); }; },\n    '.': function(c, n) { REX.HasEscapes.test(n) && (n = unescapeIdentifier(n)); return function(e, f) { return byClass(n, c); }; }\n    },\n\n  // find duplicate ids using iterative walk\n  byIdRaw =\n    function(id, context) {\n      var node = context, nodes = [ ], next = node.firstElementChild;\n      while ((node = next)) {\n        node.id == id && (nodes[nodes.length] = node);\n        if ((next = node.firstElementChild || node.nextElementSibling)) continue;\n        while (!next && (node = node.parentElement) && node !== context) {\n          next = node.nextElementSibling;\n        }\n      }\n      return nodes;\n    },\n\n  // context agnostic getElementById\n  byId =\n    function(id, context) {\n      var e, i, l, nodes, api = method['#'];\n\n      // duplicates id allowed\n      if (Config.IDS_DUPES === false) {\n        if (api in context) {\n          return (e = context[api](id)) ? [ e ] : none;\n        }\n      } else {\n        if ('all' in context) {\n          if ((e = context.all[id])) {\n            if (e.nodeType == 1) return e.getAttribute('id') != id ? [ ] : [ e ];\n            else if (id == 'length') return (e = context[api](id)) ? [ e ] : none;\n            for (i = 0, l = e.length, nodes = [ ]; l > i; ++i) {\n              if (e[i].id == id) nodes[nodes.length] = e[i];\n            }\n            return nodes && nodes.length ? nodes : [ nodes ];\n          } else return none;\n        }\n      }\n\n      return byIdRaw(id, context);\n    },\n\n  // context agnostic getElementsByTagName\n  byTag =\n    function(tag, context) {\n      var e, nodes, api = method['*'];\n      // DOCUMENT_NODE (9) & ELEMENT_NODE (1)\n      if (api in context) {\n        return slice.call(context[api](tag));\n      } else {\n        tag = tag.toLowerCase();\n        // DOCUMENT_FRAGMENT_NODE (11)\n        if ((e = context.firstElementChild)) {\n          if (!(e.nextElementSibling || tag == '*' || e.localName == tag)) {\n            return slice.call(e[api](tag));\n          } else {\n            nodes = [ ];\n            do {\n              if (tag == '*' || e.localName == tag) nodes[nodes.length] = e;\n              concatList(nodes, e[api](tag));\n            } while ((e = e.nextElementSibling));\n          }\n        } else nodes = none;\n      }\n      return nodes;\n    },\n\n  // context agnostic getElementsByClassName\n  byClass =\n    function(cls, context) {\n      var e, nodes, api = method['.'], reCls;\n      // DOCUMENT_NODE (9) & ELEMENT_NODE (1)\n      if (api in context) {\n        return slice.call(context[api](cls));\n      } else {\n        // DOCUMENT_FRAGMENT_NODE (11)\n        if ((e = context.firstElementChild)) {\n          reCls = RegExp('(^|\\\\s)' + cls + '(\\\\s|$)', QUIRKS_MODE ? 'i' : '');\n          if (!(e.nextElementSibling || reCls.test(e.className))) {\n            return slice.call(e[api](cls));\n          } else {\n            nodes = [ ];\n            do {\n              if (reCls.test(e.className)) nodes[nodes.length] = e;\n              concatList(nodes, e[api](cls));\n            } while ((e = e.nextElementSibling));\n          }\n        } else nodes = none;\n      }\n      return nodes;\n    },\n\n  // namespace aware hasAttribute\n  // helper for XML/XHTML documents\n  hasAttributeNS =\n    function(e, name) {\n      var i, l, attr = e.getAttributeNames();\n      name = RegExp(':?' + name + '$', HTML_DOCUMENT ? 'i' : '');\n      for (i = 0, l = attr.length; l > i; ++i) {\n        if (name.test(attr[i])) return true;\n      }\n      return false;\n    },\n\n  // fast resolver for the :nth-child() and :nth-last-child() pseudo-classes\n  nthElement = (function() {\n    var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();\n    return function(element, dir) {\n      // ensure caches are emptied after each run, invoking with dir = 2\n      if (dir == 2) {\n        idx = 0; len = 0; set = 0; nodes.length = 0;\n        parents.length = 0; parent = undefined;\n        return -1;\n      }\n      var e, i, j, k, l;\n      if (parent === element.parentElement) {\n        i = set; j = idx; l = len;\n      } else {\n        l = parents.length;\n        parent = element.parentElement;\n        for (i = -1, j = 0, k = l - 1; l > j; ++j, --k) {\n          if (parents[j] === parent) { i = j; break; }\n          if (parents[k] === parent) { i = k; break; }\n        }\n        if (i < 0) {\n          parents[i = l] = parent;\n          l = 0; nodes[i] = Array();\n          e = parent && parent.firstElementChild || element;\n          while (e) { nodes[i][l] = e; if (e === element) j = l; e = e.nextElementSibling; ++l; }\n          set = i; idx = 0; len = l;\n          if (l < 2) return l;\n        } else {\n          l = nodes[i].length;\n          set = i;\n        }\n      }\n      if (element !== nodes[i][j] && element !== nodes[i][j = 0]) {\n        for (j = 0, e = nodes[i], k = l - 1; l > j; ++j, --k) {\n          if (e[j] === element) { break; }\n          if (e[k] === element) { j = k; break; }\n        }\n      }\n      idx = j + 1; len = l;\n      return dir ? l - j : idx;\n    };\n  })(),\n\n  // fast resolver for the :nth-of-type() and :nth-last-of-type() pseudo-classes\n  nthOfType = (function() {\n    var idx = 0, len = 0, set = 0, parent = undefined, parents = Array(), nodes = Array();\n    return function(element, dir) {\n      // ensure caches are emptied after each run, invoking with dir = 2\n      if (dir == 2) {\n        idx = 0; len = 0; set = 0; nodes.length = 0;\n        parents.length = 0; parent = undefined;\n        return -1;\n      }\n      var e, i, j, k, l, name = element.localName;\n      if (nodes[set] && nodes[set][name] && parent === element.parentElement) {\n        i = set; j = idx; l = len;\n      } else {\n        l = parents.length;\n        parent = element.parentElement;\n        for (i = -1, j = 0, k = l - 1; l > j; ++j, --k) {\n          if (parents[j] === parent) { i = j; break; }\n          if (parents[k] === parent) { i = k; break; }\n        }\n        if (i < 0 || !nodes[i][name]) {\n          parents[i = l] = parent;\n          nodes[i] || (nodes[i] = Object());\n          l = 0; nodes[i][name] = Array();\n          e = parent && parent.firstElementChild || element;\n          while (e) { if (e === element) j = l; if (e.localName == name) { nodes[i][name][l] = e; ++l; } e = e.nextElementSibling; }\n          set = i; idx = j; len = l;\n          if (l < 2) return l;\n        } else {\n          l = nodes[i][name].length;\n          set = i;\n        }\n      }\n      if (element !== nodes[i][name][j] && element !== nodes[i][name][j = 0]) {\n        for (j = 0, e = nodes[i][name], k = l - 1; l > j; ++j, --k) {\n          if (e[j] === element) { break; }\n          if (e[k] === element) { j = k; break; }\n        }\n      }\n      idx = j + 1; len = l;\n      return dir ? l - j : idx;\n    };\n  })(),\n\n  // check if the document type is HTML\n  isHTML =\n    function(node) {\n      var doc = node.ownerDocument || node;\n      return doc.nodeType == 9 &&\n        // contentType not in IE <= 11\n        'contentType' in doc ?\n          doc.contentType.indexOf('/html') > 0 :\n          doc.createElement('DiV').localName == 'div';\n    },\n\n  // configure the engine to use special handling\n  configure =\n    function(option, clear) {\n      if (typeof option == 'string') { return !!Config[option]; }\n      if (typeof option != 'object') { return Config; }\n      for (var i in option) {\n        Config[i] = !!option[i];\n      }\n      // clear lambda cache\n      if (clear) {\n        matchResolvers = { };\n        selectResolvers = { };\n      }\n      setIdentifierSyntax();\n      return true;\n    },\n\n  // centralized error and exceptions handling\n  emit =\n    function(message, proto) {\n      var err;\n      if (Config.VERBOSITY) {\n        if (proto) {\n          err = new proto(message);\n        } else {\n          err = new global.DOMException(message, 'SyntaxError');\n        }\n        throw err;\n      }\n      if (Config.LOGERRORS && console && console.log) {\n        console.log(message);\n      }\n    },\n\n  // execute the engine initialization code\n  initialize =\n    function(doc) {\n      setIdentifierSyntax();\n      lastContext = switchContext(doc, true);\n    },\n\n  // build validation regexps used by the engine\n  setIdentifierSyntax =\n    function() {\n\n      //\n      // NOTE: SPECIAL CASES IN CSS SYNTAX PARSING RULES\n      //\n      // The <EOF-token> https://drafts.csswg.org/css-syntax/#typedef-eof-token\n      // allow mangled|unclosed selector syntax at the end of selectors strings\n      //\n      // Literal equivalent hex representations of the characters: \" ' ` ] )\n      //\n      //     \\\\x22 = \" - double quotes    \\\\x5b = [ - open square bracket\n      //     \\\\x27 = ' - single quote     \\\\x5d = ] - closed square bracket\n      //     \\\\x60 = ` - back tick        \\\\x28 = ( - open round parens\n      //     \\\\x5c = \\ - back slash       \\\\x29 = ) - closed round parens\n      //\n      // using hex format prevents false matches of opened/closed instances\n      // pairs, coloring breakage and other editors highlightning problems.\n      //\n\n      var identifier =\n        // doesn't start with a digit\n        (Config.NONDIGITS ? '(?=[^0-9])' : '') +\n        // can start with double dash\n        '(?:-{2}' +\n          // may include ascii chars\n          '|[a-zA-Z0-9-_]' +\n          // non-ascii chars\n          '|[^\\\\x00-\\\\x9f]' +\n          // escaped chars\n          '|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-fA-F]' +\n          // unicode chars\n          '|\\\\\\\\[0-9a-fA-F]{1,6}(?:\\\\r\\\\n|\\\\s)?' +\n          // any escaped chars\n          '|\\\\\\\\.' +\n        ')+',\n\n      pseudonames = '[-\\\\w]+',\n      pseudoparms = '(?:[-+]?\\\\d*)(?:n\\\\s?[-+]?\\\\s?\\\\d*)',\n      doublequote = '\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(?:\"|$)',\n      singlequote = \"'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*(?:'|$)\",\n\n      attrparser = identifier + '|' + doublequote + '|' + singlequote,\n\n      attrvalues = '([\\\\x22\\\\x27]?)((?!\\\\3)*|(?:\\\\\\\\?.)*?)(?:\\\\3|$)',\n\n      attributes =\n        '\\\\[' +\n          // attribute presence\n          '(?:\\\\*\\\\|)?' +\n          WSP + '?' +\n          '(' + identifier + '(?::' + identifier + ')?)' +\n          WSP + '?' +\n          '(?:' +\n            '(' + CFG.operators + ')' + WSP + '?' +\n            '(?:' + attrparser + ')' +\n          ')?' +\n          // attribute case sensitivity\n          '(?:' + WSP + '?\\\\b(i))?' + WSP + '?' +\n        '(?:\\\\]|$)',\n\n      attrmatcher = attributes.replace(attrparser, attrvalues),\n\n      pseudoclass =\n        '(?:\\\\x28' + WSP + '*' +\n          '(?:' + pseudoparms + '?)?|' +\n          // universal * &\n          // namespace *|*\n          '(?:\\\\*|\\\\|)|' +\n          '(?:' +\n            '(?::' + pseudonames +\n            '(?:\\\\x28' + pseudoparms + '?(?:\\\\x29|$))?|' +\n          ')|' +\n          '(?:[.#]?' + identifier + ')|' +\n          '(?:' + attributes + ')' +\n          ')+|' +\n          '(?:' + WSP + '?,' + WSP + '?)|' +\n          '(?:' + WSP + '?)|' +\n          '(?:\\\\x29|$))*',\n\n      standardValidator =\n        '(?=' + WSP + '?[^>+~(){}<>])' +\n        '(?:' +\n          // universal * &\n          // namespace *|*\n          '(?:\\\\*|\\\\|)|' +\n          '(?:[.#]?' + identifier + ')+|' +\n          '(?:' + attributes + ')+|' +\n          '(?:::?' + pseudonames + pseudoclass + ')|' +\n          '(?:' + WSP + '?' + CFG.combinators + WSP + '?)|' +\n          '(?:' + WSP + '?,' + WSP + '?)|' +\n          '(?:' + WSP + '?)' +\n        ')+';\n\n      // the following global RE is used to return the\n      // deepest localName in selector strings and then\n      // use it to retrieve all possible matching nodes\n      // that will be filtered by compiled resolvers\n      reOptimizer = RegExp(\n        '(?:([.:#*]?)' +\n        '(' + identifier + ')' +\n        '(?:' +\n          ':[-\\\\w]+|' +\n          '\\\\[[^\\\\]]+(?:\\\\]|$)|' +\n          '\\\\x28[^\\\\x29]+(?:\\\\x29|$)' +\n        ')*)$');\n\n      // global\n      reValidator = RegExp(standardValidator, 'g');\n\n      Patterns.id = RegExp('^#(' + identifier + ')(.*)');\n      Patterns.tagName = RegExp('^(' + identifier + ')(.*)');\n      Patterns.className = RegExp('^\\\\.(' + identifier + ')(.*)');\n      Patterns.attribute = RegExp('^(?:' + attrmatcher + ')(.*)');\n    },\n\n  F_INIT = '\"use strict\";return function Resolver(c,f,x,r)',\n\n  S_HEAD = 'var e,n,o,j=r.length-1,k=-1',\n  M_HEAD = 'var e,n,o',\n\n  S_LOOP = 'main:while((e=c[++k]))',\n  N_LOOP = 'main:while((e=c.item(++k)))',\n  M_LOOP = 'e=c;',\n\n  S_BODY = 'r[++j]=c[k];',\n  N_BODY = 'r[++j]=c.item(k);',\n  M_BODY = '',\n\n  S_TAIL = 'continue main;',\n  M_TAIL = 'r=true;',\n\n  S_TEST = 'if(f(c[k])){break main;}',\n  N_TEST = 'if(f(c.item(k))){break main;}',\n  M_TEST = 'f(c);',\n\n  S_VARS = [ ],\n  M_VARS = [ ],\n\n  // compile groups or single selector strings into\n  // executable functions for matching or selecting\n  compile =\n    function(selector, mode, callback) {\n      var factory, token, head = '', loop = '', macro = '', source = '', vars = '';\n\n      // 'mode' can be boolean or null\n      // true = select / false = match\n      // null to use collection.item()\n      switch (mode) {\n        case true:\n          if (selectLambdas[selector]) { return selectLambdas[selector]; }\n          macro = S_BODY + (callback ? S_TEST : '') + S_TAIL;\n          head = S_HEAD;\n          loop = S_LOOP;\n          break;\n        case false:\n          if (matchLambdas[selector]) { return matchLambdas[selector]; }\n          macro = M_BODY + (callback ? M_TEST : '') + M_TAIL;\n          head = M_HEAD;\n          loop = M_LOOP;\n          break;\n        case null:\n          if (selectLambdas[selector]) { return selectLambdas[selector]; }\n          macro = N_BODY + (callback ? N_TEST : '') + S_TAIL;\n          head = S_HEAD;\n          loop = N_LOOP;\n          break;\n        default:\n          break;\n      }\n\n      source = compileSelector(selector, macro, mode, callback);\n\n      loop += mode || mode === null ? '{' + source + '}' : source;\n\n      if (mode || mode === null && selector.includes(':nth')) {\n        loop += reNthElem.test(selector) ? 's.nthElement(null, 2);' : '';\n        loop += reNthType.test(selector) ? 's.nthOfType(null, 2);' : '';\n      }\n\n      if (S_VARS[0] || M_VARS[0]) {\n        vars = ',' + (S_VARS.join(',') || M_VARS.join(','));\n        S_VARS.length = 0;\n        M_VARS.length = 0;\n      }\n\n      factory = Function('s', F_INIT + '{' + head + vars + ';' + loop + 'return r;}')(Snapshot);\n\n      return mode || mode === null ? (selectLambdas[selector] = factory) : (matchLambdas[selector] = factory);\n    },\n\n  // build conditional code to check components of selector strings\n  compileSelector =\n    function(expression, source, mode, callback) {\n\n      var a, b, n, f, k = 0, name, NS, referenceElement,\n      compat, expr, match, result, status, symbol, test,\n      type, selector = expression, selector_string, vars;\n\n      // original 'select' or 'match' selector string before normalization\n      selector_string = mode ? lastSelected : lastMatched;\n\n      // isolate selector combinators/components and normalize whitespace\n      selector = selector.replace(STD.combinator, '$1');//.replace(STD.whitespace, ' ');\n\n      // javascript needs a label to break\n      // out of the while loops processing\n      selector_recursion_label:\n\n      while (selector) {\n\n        ++k;\n\n        // get namespace prefix if present or get first char of selector\n        symbol = STD.apimethods.test(selector) ? '|' : selector[0];\n\n        switch (symbol) {\n\n          // universal resolver\n          case '*':\n            match = selector.match(Patterns.universal);\n            break;\n\n          // id resolver\n          case '#':\n            match = selector.match(Patterns.id);\n            source = 'if((/^' + match[1] + '$/.test(e.getAttribute(\"id\")))){' + source + '}';\n            break;\n\n          // class name resolver\n          case '.':\n            match = selector.match(Patterns.className);\n            compat = (QUIRKS_MODE ? 'i' : '') + '.test(e.getAttribute(\"class\"))';\n            source = 'if((/(^|\\\\s)' + match[1] + '(\\\\s|$)/' + compat + ')){' + source + '}';\n            break;\n\n          // tag name resolver\n          case (/[_a-z]/i.test(symbol) ? symbol : undefined):\n            match = selector.match(Patterns.tagName);\n            source = 'if((e.localName==\"' + match[1] + '\")){' + source + '}';\n            break;\n\n          // namespace resolver\n          case '|':\n            match = selector.match(Patterns.namespace);\n            if (match[1] == '*') {\n              source = 'if(true){' + source + '}';\n            } else if (!match[1]) {\n              source = 'if((!e.namespaceURI)){' + source + '}';\n            } else if (typeof match[1] == 'string' && root.prefix == match[1]) {\n              source = 'if((e.namespaceURI==\"' + NAMESPACE + '\")){' + source + '}';\n            } else {\n              emit('\\'' + selector_string + '\\'' + qsInvalid);\n            }\n            break;\n\n          // attributes resolver\n          case '[':\n            match = selector.match(Patterns.attribute);\n            NS = match[0].match(STD.namespaces);\n            name = match[1];\n            expr = name.split(':');\n            expr = expr.length == 2 ? expr[1] : expr[0];\n            if (match[2] && !(test = Operators[match[2]])) {\n              emit('\\'' + selector_string + '\\'' + qsInvalid);\n              return '';\n            }\n            if (match[4] === '') {\n              test = match[2] == '~=' ?\n                { p1: '^\\\\s', p2: '+$', p3: 'true' } :\n                  match[2] in ATTR_STD_OPS && match[2] != '~=' ?\n                { p1: '^',    p2: '$',  p3: 'true' } : test;\n            } else if (match[2] == '~=' && match[4].includes(' ')) {\n              // whitespace separated list but value contains space\n              source = 'if(false){' + source + '}';\n              break;\n            } else if (match[4]) {\n              match[4] = convertEscapes(match[4]).replace(REX.RegExpChar, '\\\\$&');\n            }\n            type = match[5] == 'i' || (HTML_DOCUMENT && HTML_TABLE[expr.toLowerCase()]) ? 'i' : '';\n            source = 'if((' +\n              (!match[2] ? (NS ? 's.hasAttributeNS(e,\"' + name + '\")' : 'e.hasAttribute&&e.hasAttribute(\"' + name + '\")') :\n              !match[4] && ATTR_STD_OPS[match[2]] && match[2] != '~=' ? 'e.getAttribute&&e.getAttribute(\"' + name + '\")==\"\"' :\n              '(/' + test.p1 + match[4] + test.p2 + '/' + type + ').test(e.getAttribute&&e.getAttribute(\"' + name + '\"))==' + test.p3) +\n              ')){' + source + '}';\n            break;\n\n          // *** General sibling combinator\n          // E ~ F (F relative sibling of E)\n          case '~':\n            match = selector.match(Patterns.relative);\n            source = 'var N' + k + '=e;while(e&&(e=e.previousElementSibling)){' + source + '}e=N' + k + ';';\n            break;\n          // *** Adjacent sibling combinator\n          // E + F (F adiacent sibling of E)\n          case '+':\n            match = selector.match(Patterns.adjacent);\n            source = 'var N' + k + '=e;if(e&&(e=e.previousElementSibling)){' + source + '}e=N' + k + ';';\n            break;\n          // *** Descendant combinator\n          // E F (E ancestor of F)\n          case '\\x09':\n          case '\\x20':\n            match = selector.match(Patterns.ancestor);\n            source = 'var N' + k + '=e;while(e&&(e=e.parentElement)){' + source + '}e=N' + k + ';';\n            break;\n          // *** Child combinator\n          // E > F (F children of E)\n          case '>':\n            match = selector.match(Patterns.children);\n            source = 'var N' + k + '=e;if(e&&(e=e.parentElement)){' + source + '}e=N' + k + ';';\n            break;\n\n          // *** user supplied combinators extensions\n          case (symbol in Combinators ? symbol : undefined):\n            // for other registered combinators extensions\n            match[match.length - 1] = '*';\n            source = Combinators[symbol](match) + source;\n            break;\n\n          // *** tree-structural pseudo-classes\n          // :root, :empty, :first-child, :last-child, :only-child, :first-of-type, :last-of-type, :only-of-type\n          case ':':\n            if ((match = selector.match(Patterns.structural))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'root':\n                  // there can only be one :root element, so exit the loop once found\n                  source = 'if((e===s.root)){' + source + (mode ? 'break main;' : '') + '}';\n                  break;\n                case 'empty':\n                  // matches elements that don't contain elements or text nodes\n                  source = 'n=e.firstChild;while(n&&!(/1|3/).test(n.nodeType)){n=n.nextSibling}if(!n){' + source + '}';\n                  break;\n\n                // *** child-indexed pseudo-classes\n                // :first-child, :last-child, :only-child\n                case 'only-child':\n                  source = 'if((!e.nextElementSibling&&!e.previousElementSibling)){' + source + '}';\n                  break;\n                case 'last-child':\n                  source = 'if((!e.nextElementSibling)){' + source + '}';\n                  break;\n                case 'first-child':\n                  source = 'if((!e.previousElementSibling)){' + source + '}';\n                  break;\n\n                // *** typed child-indexed pseudo-classes\n                // :only-of-type, :last-of-type, :first-of-type\n                case 'only-of-type':\n                  source = 'o=e.localName;' +\n                    'n=e;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){' +\n                    'n=e;while((n=n.previousElementSibling)&&n.localName!=o);}if(!n){' + source + '}';\n                  break;\n                case 'last-of-type':\n                  source = 'n=e;o=e.localName;while((n=n.nextElementSibling)&&n.localName!=o);if(!n){' + source + '}';\n                  break;\n                case 'first-of-type':\n                  source = 'n=e;o=e.localName;while((n=n.previousElementSibling)&&n.localName!=o);if(!n){' + source + '}';\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** child-indexed & typed child-indexed pseudo-classes\n            // :nth-child, :nth-of-type, :nth-last-child, :nth-last-of-type\n            else if ((match = selector.match(Patterns.treestruct))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'nth-child':\n                case 'nth-of-type':\n                case 'nth-last-child':\n                case 'nth-last-of-type':\n                  expr = /-of-type/i.test(match[1]);\n                  if (match[1] && match[2]) {\n                    type = /last/i.test(match[1]);\n                    if (match[2] == 'n') {\n                      source = 'if(true){' + source + '}';\n                      break;\n                    } else if (match[2] == '1') {\n                      test = type ? 'next' : 'previous';\n                      source = expr ? 'n=e;o=e.localName;' +\n                        'while((n=n.' + test + 'ElementSibling)&&n.localName!=o);if(!n){' + source + '}' :\n                        'if(!e.' + test + 'ElementSibling){' + source + '}';\n                      break;\n                    } else if (match[2] == 'even' || match[2] == '2n0' || match[2] == '2n+0' || match[2] == '2n') {\n                      test = 'n%2==0';\n                    } else if (match[2] == 'odd'  || match[2] == '2n1' || match[2] == '2n+1') {\n                      test = 'n%2==1';\n                    } else {\n                      f = /n/i.test(match[2]);\n                      n = match[2].split('n');\n                      a = parseInt(n[0], 10) || 0;\n                      b = parseInt(n[1], 10) || 0;\n                      if (n[0] == '-') { a = -1; }\n                      if (n[0] == '+') { a = +1; }\n                      test = (b ? '(n' + (b > 0 ? '-' : '+') + Math.abs(b) + ')' : 'n') + '%' + a + '==0' ;\n                      test =\n                        a >= +1 ? (f ? 'n>' + (b - 1) + (Math.abs(a) != 1 ? '&&' + test : '') : 'n==' + a) :\n                        a <= -1 ? (f ? 'n<' + (b + 1) + (Math.abs(a) != 1 ? '&&' + test : '') : 'n==' + a) :\n                        a === 0 ? (n[0] ? 'n==' + b : 'n>' + (b - 1)) : 'false';\n                    }\n                    expr = expr ? 'OfType' : 'Element';\n                    type = type ? 'true' : 'false';\n                    source = 'n=s.nth' + expr + '(e,' + type + ');if((' + test + ')){' + source + '}';\n                  } else {\n                    emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  }\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** logical combination pseudo-classes\n            // :is( s1, [ s2, ... ]), :not( s1, [ s2, ... ])\n            else if ((match = selector.match(Patterns.logicalsel))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'is':\n                case 'where':\n                case 'matches':\n                  expr = match[2].replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');\n                  source = 'if(s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + '\",e)){' + source + '}';\n                  break;\n                case 'not':\n                  expr = match[2].replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');\n                  source = 'if(!s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + '\",e)){' + source + '}';\n                  break;\n                case 'has':\n                  referenceElement = selector_string.split(':')[0];\n                  expr = match[2].replace(REX.CommaGroup, ',').replace(REX.TrimSpaces, '');\n                  source = 'if(s.match(\"' + expr.replace(/\\x22/g, '\\\\\"') + ',' + referenceElement + '\",e)){' + source + '}';\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** linguistic pseudo-classes\n            // :dir( ltr / rtl ), :lang( en )\n            else if ((match = selector.match(Patterns.linguistic))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'dir':\n                  source = 'var p;if((' +\n                    '(/' + match[2] + '/i.test(e.dir))||(p=s.ancestor(\"[dir]\", e))&&' +\n                    '(/' + match[2] + '/i.test(p.dir))||(e.dir==\"\"||e.dir==\"auto\")&&' +\n                    '(' + (match[2] == 'ltr' ? '!':'')+ RTL +'.test(e.textContent)))' +\n                    '){' + source + '};';\n                  break;\n                case 'lang':\n                  expr = '(?:^|-)' + match[2] + '(?:-|$)';\n                  source = 'var p;if((' +\n                    '(e.isConnected&&(e.lang==\"\"&&(p=s.ancestor(\"[lang]\",e)))&&' +\n                    '(p.lang==\"' + match[2] + '\")||/'+ expr +'/i.test(e.lang)))' +\n                    '){' + source + '};';\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** location pseudo-classes\n            // :any-link, :link, :visited, :target\n            else if ((match = selector.match(Patterns.locationpc))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'any-link':\n                  source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\")||e.visited)){' + source + '}';\n                  break;\n                case 'link':\n                  source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\"))){' + source + '}';\n                  break;\n                case 'visited':\n                  source = 'if((/^a|area$/i.test(e.localName)&&e.hasAttribute(\"href\")&&e.visited)){' + source + '}';\n                  break;\n                case 'target':\n                  source = 'if(((s.doc.compareDocumentPosition(e)&16)&&s.doc.location.hash&&e.id==s.doc.location.hash.slice(1))){' + source + '}';\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** user actions pseudo-classes\n            // :hover, :active, :focus, :focus-within\n            else if ((match = selector.match(Patterns.useraction))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'hover':\n                  source = 'hasFocus' in doc && doc.hasFocus() ?\n                    'if((e===s.doc.hoverElement)){' + source + '}' : source;\n                  break;\n                case 'active':\n                  source = 'hasFocus' in doc && doc.hasFocus() ?\n                    'if((e===s.doc.activeElement)){' + source + '}' : source;\n                  break;\n                case 'focus':\n                  source = 'hasFocus' in doc ?\n                    'if(e.parentElement&&e.parentElement.style.display!=\"none\"&&' +\n                    'e===s.doc.activeElement&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex==\"number\")){' + source + '}' : source;\n                  break;\n                case 'focus-within':\n                  source = 'hasFocus' in doc ?\n                    'n=s.doc.activeElement;if(e!==n){while(n&&(n=n.parentElement)){if(e===n)break;}}' +\n                    'if((e===n&&s.doc.hasFocus()&&(e.type||e.href||typeof e.tabIndex==\"number\"))){' + source + '}' : source;\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** user interface and form pseudo-classes\n            // :enabled, :disabled, :read-only, :read-write, :placeholder-shown, :default\n            else if ((match = selector.match(Patterns.inputstate))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'enabled':\n                  source = 'if(((\"form\" in e||/^optgroup$/i.test(e.localName))&&\"disabled\" in e &&e.disabled===false' +\n                    ')){' + source + '}';\n                  break;\n                case 'disabled':\n                  // https://www.w3.org/TR/html5/forms.html#enabling-and-disabling-form-controls:-the-disabled-attribute\n                  source = 'if(((\"form\" in e||/^optgroup$/i.test(e.localName))&&\"disabled\" in e&&' +\n                    '(e.disabled===true||(n=s.ancestor(\"fieldset\",e))&&(n=s.first(\"legend\",n))&&!n.contains(e))' +\n                    ')){' + source + '}';\n                  break;\n                case 'read-only':\n                  source =\n                    'if((' +\n                      '(/^textarea$/i.test(e.localName)&&(e.readOnly||e.disabled))||' +\n                      '(\"|password|text|\".includes(\"|\"+e.type+\"|\")&&e.readOnly)' +\n                    ')){' + source + '}';\n                  break;\n                case 'read-write':\n                  source =\n                    'if((' +\n                      '((/^textarea$/i.test(e.localName)&&!e.readOnly&&!e.disabled)||' +\n                      '(\"|password|text|\".includes(\"|\"+e.type+\"|\")&&!e.readOnly&&!e.disabled))||' +\n                      '(e.hasAttribute(\"contenteditable\")||(s.doc.designMode==\"on\"))' +\n                    ')){' + source + '}';\n                  break;\n                case 'placeholder-shown':\n                  source =\n                    'if((' +\n                      '(/^input|textarea$/i.test(e.localName))&&e.hasAttribute(\"placeholder\")&&' +\n                      '(\"|textarea|password|number|search|email|text|tel|url|\".includes(\"|\"+e.type+\"|\"))&&' +\n                      '(!s.match(\":focus\",e))' +\n                    ')){' + source + '}';\n                  break;\n                case 'default':\n                  source =\n                    'if((\"form\" in e && e.form)){' +\n                      'var x=0;n=[];' +\n                      'if(e.type==\"image\")n=e.form.getElementsByTagName(\"input\");' +\n                      'if(e.type==\"submit\")n=e.form.elements;' +\n                      'while(n[x]&&e!==n[x]){' +\n                        'if(n[x].type==\"image\")break;' +\n                        'if(n[x].type==\"submit\")break;' +\n                        'x++;' +\n                      '}' +\n                    '}' +\n                    'if((e.form&&(e===n[x]&&\"|image|submit|\".includes(\"|\"+e.type+\"|\"))||' +\n                      '((/^option$/i.test(e.localName))&&e.defaultSelected)||' +\n                      '((\"|radio|checkbox|\".includes(\"|\"+e.type+\"|\"))&&e.defaultChecked)' +\n                    ')){' + source + '}';\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // *** input pseudo-classes (for form validation)\n            // :checked, :indeterminate, :valid, :invalid, :in-range, :out-of-range, :required, :optional\n            else if ((match = selector.match(Patterns.inputvalue))) {\n              match[1] = match[1].toLowerCase();\n              switch (match[1]) {\n                case 'checked':\n                  source = 'if((/^input$/i.test(e.localName)&&' +\n                    '(\"|radio|checkbox|\".includes(\"|\"+e.type+\"|\")&&e.checked)||' +\n                    '(/^option$/i.test(e.localName)&&(e.selected||e.checked))' +\n                    ')){' + source + '}';\n                  break;\n                case 'indeterminate':\n                  source =\n                    'if((/^progress$/i.test(e.localName)&&!e.hasAttribute(\"value\"))||' +\n                      '(/^input$/i.test(e.localName)&&(\"checkbox\"==e.type&&e.indeterminate)||' +\n                      '(\"radio\"==e.type&&e.name&&!s.first(\"input[name=\"+e.name+\"]:checked\",e.form))' +\n                    ')){' + source + '}';\n                  break;\n                case 'required':\n                  source =\n                    'if((/^input|select|textarea$/i.test(e.localName)&&e.required)' +\n                    '){' + source + '}';\n                  break;\n                case 'optional':\n                  source =\n                    'if((/^input|select|textarea$/i.test(e.localName)&&!e.required)' +\n                    '){' + source + '}';\n                  break;\n                case 'invalid':\n                  source =\n                    'if(((' +\n                      '(/^form$/i.test(e.localName)&&!e.noValidate)||' +\n                      '(e.willValidate&&!e.formNoValidate))&&!e.checkValidity())||' +\n                      '(/^fieldset$/i.test(e.localName)&&s.first(\":invalid\",e))' +\n                    '){' + source + '}';\n                  break;\n                case 'valid':\n                  source =\n                    'if(((' +\n                      '(/^form$/i.test(e.localName)&&!e.noValidate)||' +\n                      '(e.willValidate&&!e.formNoValidate))&&e.checkValidity())||' +\n                      '(/^fieldset$/i.test(e.localName)&&s.first(\":valid\",e))' +\n                    '){' + source + '}';\n                  break;\n                case 'in-range':\n                  source =\n                    'if((/^input$/i.test(e.localName))&&' +\n                      '(e.willValidate&&!e.formNoValidate)&&' +\n                      '(!e.validity.rangeUnderflow&&!e.validity.rangeOverflow)&&' +\n                      '(\"|date|datetime-local|month|number|range|time|week|\".includes(\"|\"+e.type+\"|\"))&&' +\n                      '(\"range\"==e.type||e.getAttribute(\"min\")||e.getAttribute(\"max\"))' +\n                    '){' + source + '}';\n                  break;\n                case 'out-of-range':\n                  source =\n                    'if((/^input$/i.test(e.localName))&&' +\n                      '(e.willValidate&&!e.formNoValidate)&&' +\n                      '(e.validity.rangeUnderflow||e.validity.rangeOverflow)&&' +\n                      '(\"|date|datetime-local|month|number|range|time|week|\".includes(\"|\"+e.type+\"|\"))&&' +\n                      '(\"range\"==e.type||e.getAttribute(\"min\")||e.getAttribute(\"max\"))' +\n                    '){' + source + '}';\n                  break;\n                default:\n                  emit('\\'' + selector_string + '\\'' + qsInvalid);\n                  break;\n              }\n            }\n\n            // allow pseudo-elements starting with single colon (:)\n            // :after, :before, :first-letter, :first-line\n            // assert: e.type is in double-colon format, like ::after\n            else if ((match = selector.match(Patterns.pseudo_sng))) {\n              source = 'if(e.element&&e.type.toLowerCase()==\"' +\n                ':' + match[0].toLowerCase() + '\"){e=e.element;' + source + '}';\n            }\n\n            // allow pseudo-elements starting with double colon (::)\n            // ::after, ::before, ::marker, ::placeholder, ::inactive-selection, ::selection, ::-webkit-<foo-bar>\n            // assert: e.type is in double-colon format, like ::after\n            else if ((match = selector.match(Patterns.pseudo_dbl))) {\n              source = 'if(e.element&&e.type.toLowerCase()==\"' +\n                match[0].toLowerCase() + '\"){e=e.element;' + source + '}';\n            }\n\n            // placeholder for parsed only no-op selectors\n            else if ((match = selector.match(Patterns.pseudo_nop))) {\n              source = 'if(false){' + source + '}';\n            }\n\n            else {\n\n              // reset\n              expr = false;\n              status = false;\n\n              // process registered selector extensions\n              for (expr in Selectors) {\n                if ((match = selector.match(Selectors[expr].Expression))) {\n                  result = Selectors[expr].Callback(match, source, mode, callback);\n                  if ('match' in result) { match = result.match; }\n                  vars = result.modvar;\n                  if (mode) {\n                     // add extra select() vars\n                     vars && S_VARS.indexOf(vars) < 0 && (S_VARS[S_VARS.length] = vars);\n                  } else {\n                     // add extra match() vars\n                     vars && M_VARS.indexOf(vars) < 0 && (M_VARS[M_VARS.length] = vars);\n                  }\n                  // extension source code\n                  source = result.source;\n                  // extension status code\n                  status = result.status;\n                  // break on status error\n                  if (status) { break; }\n                }\n              }\n\n              if (!status) {\n                emit('unknown pseudo-class selector \\'' + selector + '\\'');\n                return '';\n              }\n\n              if (!expr) {\n                emit('unknown token in selector \\'' + selector + '\\'');\n                return '';\n              }\n\n            }\n            break;\n\n        default:\n          emit('\\'' + selector_string + '\\'' + qsInvalid);\n          break selector_recursion_label;\n\n        }\n        // end of switch symbol\n\n        if (!match) {\n          emit('\\'' + selector_string + '\\'' + qsInvalid);\n          return '';\n        }\n\n        // pop last component\n        selector = match.pop();\n      }\n      // end of while selector\n\n      return source;\n    },\n\n  // replace ':scope' pseudo-class with element references\n  makeref =\n    function(selectors, element) {\n      return selectors.replace(/:scope/ig,\n        element.localName +\n        (element.id ? '#' + element.id : '') +\n        (element.className ? '.' + element.classList[0] : ''));\n    },\n\n  // equivalent of w3c 'closest' method\n  ancestor =\n    function _closest(selectors, element, callback) {\n\n      if ((/:scope/i).test(selectors)) {\n        selectors = makeref(selectors, element);\n      }\n\n      while (element) {\n        if (match(selectors, element, callback)) break;\n        element = element.parentElement;\n      }\n      return element;\n    },\n\n  match_assert =\n    function(f, element, callback) {\n      for (var i = 0, l = f.length, r = false; l > i; ++i)\n        f[i](element, callback, null, false) && (r = true);\n      return r;\n    },\n\n  match_collect =\n    function(selectors, callback) {\n      for (var i = 0, l = selectors.length, f = [ ]; l > i; ++i)\n        f[i] = compile(selectors[i], false, callback);\n      return { factory: f };\n    },\n\n  // equivalent of w3c 'matches' method\n  match =\n    function _matches(selectors, element, callback) {\n\n      var expressions, parsed;\n\n      if (element && matchResolvers[selectors]) {\n        return match_assert(matchResolvers[selectors].factory, element, callback);\n      }\n\n      lastMatched = selectors;\n\n      // arguments validation\n      if (arguments.length === 0) {\n        emit(qsNotArgs, TypeError);\n        return Config.VERBOSITY ? undefined : false;\n      } else if (arguments[0] === '') {\n        emit('\\'\\'' + qsInvalid);\n        return Config.VERBOSITY ? undefined : false;\n      }\n\n      // input NULL or UNDEFINED\n      if (typeof selectors != 'string') {\n        selectors = '' + selectors;\n      }\n\n      if ((/:scope/i).test(selectors)) {\n        selectors = makeref(selectors, element);\n      }\n\n      // normalize input string\n      parsed = selectors.\n        replace(/\\x00|\\\\$/g, '\\ufffd').\n        replace(REX.CombineWSP, '\\x20').\n        replace(REX.PseudosWSP, '$1').\n        replace(REX.TabCharWSP, '\\t').\n        replace(REX.CommaGroup, ',').\n        replace(REX.TrimSpaces, '');\n\n      // parse, validate and split possible compound selectors\n      if ((expressions = parsed.match(reValidator)) && expressions.join('') == parsed) {\n        expressions = parsed.match(REX.SplitGroup);\n        if (parsed[parsed.length - 1] == ',') {\n          emit(qsInvalid);\n          return Config.VERBOSITY ? undefined : false;\n        }\n      } else {\n        emit('\\'' + selectors + '\\'' + qsInvalid);\n        return Config.VERBOSITY ? undefined : false;\n      }\n\n      matchResolvers[selectors] = match_collect(expressions, callback);\n\n      return match_assert(matchResolvers[selectors].factory, element, callback);\n    },\n\n  // equivalent of w3c 'querySelector' method\n  first =\n    function _querySelector(selectors, context, callback) {\n      if (arguments.length === 0) {\n        emit(qsNotArgs, TypeError);\n      }\n      return select(selectors, context,\n        typeof callback == 'function' ?\n        function firstMatch(element) {\n          callback(element);\n          return false;\n        } :\n        function firstMatch() {\n          return false;\n        }\n      )[0] || null;\n    },\n\n  // equivalent of w3c 'querySelectorAll' method\n  select =\n    function _querySelectorAll(selectors, context, callback) {\n\n      var expressions, nodes = [ ], parsed, resolver;\n\n      context || (context = doc);\n\n      if (selectors) {\n        if ((resolver = selectResolvers[selectors])) {\n          if (resolver.context === context && resolver.callback === callback) {\n            var f = resolver.factory, h = resolver.htmlset, n = resolver.nodeset;\n            if (n.length > 1) {\n              for (var i = 0, l = n.length, list; l > i; ++i) {\n                list = compat[n[i][0]](context, n[i].slice(1))();\n                if (f[i] !== null) {\n                  f[i](list, callback, context, nodes);\n                } else {\n                  nodes = nodes.concat(list);\n                }\n              }\n              if (l > 1 && nodes.length > 1) {\n                nodes.sort(documentOrder);\n                hasDupes && (nodes = unique(nodes));\n              }\n            } else {\n              if (f[0]) {\n                nodes = f[0](h[0](), callback, context, nodes);\n              } else {\n                nodes = h[0]();\n              }\n            }\n            return typeof callback == 'function' ?\n              concatCall(nodes, callback) : nodes;\n          }\n        }\n      }\n\n      lastSelected = selectors;\n\n      // arguments validation\n      if (arguments.length === 0) {\n        emit(qsNotArgs, TypeError);\n        return Config.VERBOSITY ? undefined : none;\n      } else if (arguments[0] === '') {\n        emit('\\'\\'' + qsInvalid);\n        return Config.VERBOSITY ? undefined : none;\n      } else if (lastContext !== context) {\n        lastContext = switchContext(context);\n      }\n\n      // input NULL or UNDEFINED\n      if (typeof selectors != 'string') {\n        selectors = '' + selectors;\n      }\n\n      if ((/:scope/i).test(selectors)) {\n        selectors = makeref(selectors, context);\n      }\n\n      // normalize input string\n      parsed = selectors.\n        replace(/\\x00|\\\\$/g, '\\ufffd').\n        replace(REX.CombineWSP, '\\x20').\n        replace(REX.PseudosWSP, '$1').\n        replace(REX.TabCharWSP, '\\t').\n        replace(REX.CommaGroup, ',').\n        replace(REX.TrimSpaces, '');\n\n      // parse, validate and split possible compound selectors\n      if ((expressions = parsed.match(reValidator)) && expressions.join('') == parsed) {\n        expressions = parsed.match(REX.SplitGroup);\n        if (parsed[parsed.length - 1] == ',') {\n          emit(qsInvalid);\n          return Config.VERBOSITY ? undefined : false;\n        }\n      } else {\n        emit('\\'' + selectors + '\\'' + qsInvalid);\n        return Config.VERBOSITY ? undefined : false;\n      }\n\n      // save/reuse factory and closure collection\n      selectResolvers[selectors] = collect(expressions, context, callback);\n\n      nodes = selectResolvers[selectors].results;\n\n      return typeof callback == 'function' ?\n        concatCall(nodes, callback) : nodes;\n    },\n\n  // optimize selectors avoiding duplicated checks\n  optimize =\n    function(selector, token) {\n      var index = token.index,\n      length = token[1].length + token[2].length;\n      return selector.slice(0, index) +\n        (' >+~'.indexOf(selector.charAt(index - 1)) > -1 ?\n          (':['.indexOf(selector.charAt(index + length + 1)) > -1 ?\n          '*' : '') : '') + selector.slice(index + length - (token[1] == '*' ? 1 : 0));\n    },\n\n  // prepare factory resolvers and closure collections\n  collect =\n    function(selectors, context, callback) {\n\n      var i, l, seen = { }, token = ['', '*', '*'], optimized = selectors,\n      factory = [ ], htmlset = [ ], nodeset = [ ], results = [ ], type;\n\n      for (i = 0, l = selectors.length; l > i; ++i) {\n\n        if (!seen[selectors[i]] && (seen[selectors[i]] = true)) {\n          type = selectors[i].match(reOptimizer);\n          if (type && type[1] != ':' && (token = type)) {\n            token[1] || (token[1] = '*');\n            optimized[i] = optimize(optimized[i], token);\n          } else {\n            token = ['', '*', '*'];\n          }\n        }\n\n        nodeset[i] = token[1] + token[2];\n        htmlset[i] = compat[token[1]](context, token[2]);\n        factory[i] = compile(optimized[i], true, null);\n\n        factory[i] ?\n          factory[i](htmlset[i](), callback, context, results) :\n          results.concat(htmlset[i]());\n      }\n\n      if (l > 1) {\n        results.sort(documentOrder);\n        hasDupes && (results = unique(results));\n      }\n\n      return {\n        callback: callback,\n        context: context,\n        factory: factory,\n        htmlset: htmlset,\n        nodeset: nodeset,\n        results: results\n      };\n\n    },\n\n  // QSA placeholders to native references\n  _closest, _matches, _querySelector, _querySelectorAll,\n\n  // overrides QSA methods (only for browsers)\n  install =\n    function(all) {\n      // save references\n      _closest = Element.prototype.closest;\n      _matches = Element.prototype.matches;\n      _querySelector = Document.prototype.querySelector;\n      _querySelectorAll = Document.prototype.querySelectorAll;\n\n      function parseQSArgs() {\n        var method = arguments[arguments.length - 1];\n        return (\n          arguments.length < 2 ?\n            method.apply(this, [ ]) :\n          arguments.length < 3 ?\n            method.apply(this, [ arguments[0], this ]) :\n            method.apply(this, [ arguments[0], this,\n              typeof arguments[1] == 'function' ? arguments[1] : undefined ]));\n      }\n\n      Element.prototype.closest =\n        function closest() {\n          return parseQSArgs.apply(this, [].slice.call(arguments).concat(ancestor));\n        };\n\n      Element.prototype.matches =\n        function matches() {\n          return parseQSArgs.apply(this, [].slice.call(arguments).concat(match));\n        };\n\n      Element.prototype.querySelector =\n      Document.prototype.querySelector =\n      DocumentFragment.prototype.querySelector =\n        function querySelector() {\n          return parseQSArgs.apply(this, [].slice.call(arguments).concat(first));\n        };\n\n      Element.prototype.querySelectorAll =\n      Document.prototype.querySelectorAll =\n      DocumentFragment.prototype.querySelectorAll =\n        function querySelectorAll() {\n          return parseQSArgs.apply(this, [].slice.call(arguments).concat(select));\n        };\n\n      if (all) {\n        document.addEventListener('load', function(e) {\n          var c, d, r, s, t = e.target;\n          if (/iframe/i.test(t.localName)) {\n            c = '(' + Export + ')(this, ' + Factory + ');'; d = t.contentDocument;\n            s = d.createElement('script'); s.textContent = c + 'NW.Dom.install()';\n            r = d.documentElement; r.removeChild(r.insertBefore(s, r.firstChild));\n          }\n        }, true);\n      }\n\n    },\n\n  // restore QSA methods (only for browsers)\n  uninstall =\n    function() {\n      // restore references\n      if (_closest) { Element.prototype.closest = _closest; }\n      if (_matches) { Element.prototype.matches = _matches; }\n      if (_querySelector) {\n        Element.prototype.querySelector =\n        Document.prototype.querySelector =\n        DocumentFragment.prototype.querySelector = _querySelector;\n      }\n      if (_querySelectorAll) {\n        Element.prototype.querySelectorAll =\n        Document.prototype.querySelectorAll =\n        DocumentFragment.prototype.querySelectorAll = _querySelectorAll;\n      }\n    },\n\n  // empty set\n  none = Array(),\n\n  // context\n  lastContext,\n\n  // selector\n  lastMatched,\n  lastSelected,\n\n  // cached lambdas\n  matchLambdas = { },\n  selectLambdas = { },\n\n  // cached resolvers\n  matchResolvers = { },\n  selectResolvers = { },\n\n  // passed to resolvers\n  Snapshot = {\n\n    doc: doc,\n    from: doc,\n    root: root,\n\n    byTag: byTag,\n\n    first: first,\n    match: match,\n\n    ancestor: ancestor,\n\n    nthOfType: nthOfType,\n    nthElement: nthElement,\n\n    hasAttributeNS: hasAttributeNS\n  },\n\n  // public exported methods/objects\n  Dom = {\n\n    // exported cache objects\n\n    lastMatched: lastMatched,\n    lastSelected: lastSelected,\n\n    matchLambdas: matchLambdas,\n    selectLambdas: selectLambdas,\n\n    matchResolvers: matchResolvers,\n    selectResolvers: selectResolvers,\n\n    // exported compiler macros\n\n    CFG: CFG,\n\n    M_BODY: M_BODY,\n    S_BODY: S_BODY,\n    M_TEST: M_TEST,\n    S_TEST: S_TEST,\n\n    // exported engine methods\n\n    byId: byId,\n    byTag: byTag,\n    byClass: byClass,\n\n    match: match,\n    first: first,\n    select: select,\n    closest: ancestor,\n\n    compile: compile,\n    configure: configure,\n\n    emit: emit,\n    Config: Config,\n    Snapshot: Snapshot,\n\n    Version: version,\n\n    install: install,\n    uninstall: uninstall,\n\n    Operators: Operators,\n    Selectors: Selectors,\n\n    // register a new selector combinator symbol and its related function resolver\n    registerCombinator:\n      function(combinator, resolver) {\n        var i = 0, l = combinator.length, symbol;\n        for (; l > i; ++i) {\n          if (combinator[i] != '=') {\n            symbol = combinator[i];\n            break;\n          }\n        }\n        if (CFG.combinators.indexOf(symbol) < 0) {\n          CFG.combinators = CFG.combinators.replace('](', symbol + '](');\n          CFG.combinators = CFG.combinators.replace('])', symbol + '])');\n          Combinators[combinator] = resolver;\n          setIdentifierSyntax();\n        } else {\n          console.warn('Warning: the \\'' + combinator + '\\' combinator is already registered.');\n        }\n      },\n\n    // register a new attribute operator symbol and its related function resolver\n    registerOperator:\n      function(operator, resolver) {\n        var i = 0, l = operator.length, symbol;\n        for (; l > i; ++i) {\n          if (operator[i] != '=') {\n            symbol = operator[i];\n            break;\n          }\n        }\n        if (CFG.operators.indexOf(symbol) < 0 && !Operators[operator]) {\n          CFG.operators = CFG.operators.replace(']=', symbol + ']=');\n          Operators[operator] = resolver;\n          setIdentifierSyntax();\n        } else {\n          console.warn('Warning: the \\'' + operator + '\\' operator is already registered.');\n        }\n      },\n\n    // register a new selector symbol and its related function resolver\n    registerSelector:\n      function(name, rexp, func) {\n        Selectors[name] || (Selectors[name] = {\n          Expression: rexp,\n          Callback: func\n        });\n      }\n\n  };\n\n  initialize(doc);\n\n  return Dom;\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nwsapi/src/nwsapi.js\n");

/***/ })

};
;