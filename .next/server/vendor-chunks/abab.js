"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/abab";
exports.ids = ["vendor-chunks/abab"];
exports.modules = {

/***/ "(ssr)/./node_modules/abab/index.js":
/*!************************************!*\
  !*** ./node_modules/abab/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst atob = __webpack_require__(/*! ./lib/atob */ \"(ssr)/./node_modules/abab/lib/atob.js\");\nconst btoa = __webpack_require__(/*! ./lib/btoa */ \"(ssr)/./node_modules/abab/lib/btoa.js\");\n\nmodule.exports = {\n  atob,\n  btoa\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJhYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMseURBQVk7QUFDakMsYUFBYSxtQkFBTyxDQUFDLHlEQUFZOztBQUVqQztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BsYXlsaXN0X2FkbWluX25leHRfYXBwLy4vbm9kZV9tb2R1bGVzL2FiYWIvaW5kZXguanM/MzMyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgYXRvYiA9IHJlcXVpcmUoXCIuL2xpYi9hdG9iXCIpO1xuY29uc3QgYnRvYSA9IHJlcXVpcmUoXCIuL2xpYi9idG9hXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXRvYixcbiAgYnRvYVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abab/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/abab/lib/atob.js":
/*!***************************************!*\
  !*** ./node_modules/abab/lib/atob.js ***!
  \***************************************/
/***/ ((module) => {

eval("\n\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(data) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\n\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction atobLookup(chr) {\n  const index = keystr.indexOf(chr);\n  // Throw exception if character is not in the lookup string; should not be hit in tests\n  return index < 0 ? undefined : index;\n}\n\nmodule.exports = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJhYi9saWIvYXRvYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BsYXlsaXN0X2FkbWluX25leHRfYXBwLy4vbm9kZV9tb2R1bGVzL2FiYWIvbGliL2F0b2IuanM/MmM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBhdG9iKCkgYWNjb3JkaW5nIHRvIHRoZSBIVE1MIGFuZCBJbmZyYSBzcGVjcywgZXhjZXB0IHRoYXRcbiAqIGluc3RlYWQgb2YgdGhyb3dpbmcgSU5WQUxJRF9DSEFSQUNURVJfRVJSIHdlIHJldHVybiBudWxsLlxuICovXG5mdW5jdGlvbiBhdG9iKGRhdGEpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgfVxuXG4gIC8vIFdlYiBJREwgcmVxdWlyZXMgRE9NU3RyaW5ncyB0byBqdXN0IGJlIGNvbnZlcnRlZCB1c2luZyBFQ01BU2NyaXB0XG4gIC8vIFRvU3RyaW5nLCB3aGljaCBpbiBvdXIgY2FzZSBhbW91bnRzIHRvIHVzaW5nIGEgdGVtcGxhdGUgbGl0ZXJhbC5cbiAgZGF0YSA9IGAke2RhdGF9YDtcbiAgLy8gXCJSZW1vdmUgYWxsIEFTQ0lJIHdoaXRlc3BhY2UgZnJvbSBkYXRhLlwiXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1sgXFx0XFxuXFxmXFxyXS9nLCBcIlwiKTtcbiAgLy8gXCJJZiBkYXRhJ3MgbGVuZ3RoIGRpdmlkZXMgYnkgNCBsZWF2aW5nIG5vIHJlbWFpbmRlciwgdGhlbjogaWYgZGF0YSBlbmRzXG4gIC8vIHdpdGggb25lIG9yIHR3byBVKzAwM0QgKD0pIGNvZGUgcG9pbnRzLCB0aGVuIHJlbW92ZSB0aGVtIGZyb20gZGF0YS5cIlxuICBpZiAoZGF0YS5sZW5ndGggJSA0ID09PSAwKSB7XG4gICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvPT0/JC8sIFwiXCIpO1xuICB9XG4gIC8vIFwiSWYgZGF0YSdzIGxlbmd0aCBkaXZpZGVzIGJ5IDQgbGVhdmluZyBhIHJlbWFpbmRlciBvZiAxLCB0aGVuIHJldHVyblxuICAvLyBmYWlsdXJlLlwiXG4gIC8vXG4gIC8vIFwiSWYgZGF0YSBjb250YWlucyBhIGNvZGUgcG9pbnQgdGhhdCBpcyBub3Qgb25lIG9mXG4gIC8vXG4gIC8vIFUrMDAyQiAoKylcbiAgLy8gVSswMDJGICgvKVxuICAvLyBBU0NJSSBhbHBoYW51bWVyaWNcbiAgLy9cbiAgLy8gdGhlbiByZXR1cm4gZmFpbHVyZS5cIlxuICBpZiAoZGF0YS5sZW5ndGggJSA0ID09PSAxIHx8IC9bXisvMC05QS1aYS16XS8udGVzdChkYXRhKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIFwiTGV0IG91dHB1dCBiZSBhbiBlbXB0eSBieXRlIHNlcXVlbmNlLlwiXG4gIGxldCBvdXRwdXQgPSBcIlwiO1xuICAvLyBcIkxldCBidWZmZXIgYmUgYW4gZW1wdHkgYnVmZmVyIHRoYXQgY2FuIGhhdmUgYml0cyBhcHBlbmRlZCB0byBpdC5cIlxuICAvL1xuICAvLyBXZSBhcHBlbmQgYml0cyB2aWEgbGVmdC1zaGlmdCBhbmQgb3IuICBhY2N1bXVsYXRlZEJpdHMgaXMgdXNlZCB0byB0cmFja1xuICAvLyB3aGVuIHdlJ3ZlIGdvdHRlbiB0byAyNCBiaXRzLlxuICBsZXQgYnVmZmVyID0gMDtcbiAgbGV0IGFjY3VtdWxhdGVkQml0cyA9IDA7XG4gIC8vIFwiTGV0IHBvc2l0aW9uIGJlIGEgcG9zaXRpb24gdmFyaWFibGUgZm9yIGRhdGEsIGluaXRpYWxseSBwb2ludGluZyBhdCB0aGVcbiAgLy8gc3RhcnQgb2YgZGF0YS5cIlxuICAvL1xuICAvLyBcIldoaWxlIHBvc2l0aW9uIGRvZXMgbm90IHBvaW50IHBhc3QgdGhlIGVuZCBvZiBkYXRhOlwiXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIC8vIFwiRmluZCB0aGUgY29kZSBwb2ludCBwb2ludGVkIHRvIGJ5IHBvc2l0aW9uIGluIHRoZSBzZWNvbmQgY29sdW1uIG9mXG4gICAgLy8gVGFibGUgMTogVGhlIEJhc2UgNjQgQWxwaGFiZXQgb2YgUkZDIDQ2NDguIExldCBuIGJlIHRoZSBudW1iZXIgZ2l2ZW4gaW5cbiAgICAvLyB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgc2FtZSByb3cuXG4gICAgLy9cbiAgICAvLyBcIkFwcGVuZCB0byBidWZmZXIgdGhlIHNpeCBiaXRzIGNvcnJlc3BvbmRpbmcgdG8gbiwgbW9zdCBzaWduaWZpY2FudCBiaXRcbiAgICAvLyBmaXJzdC5cIlxuICAgIC8vXG4gICAgLy8gYXRvYkxvb2t1cCgpIGltcGxlbWVudHMgdGhlIHRhYmxlIGZyb20gUkZDIDQ2NDguXG4gICAgYnVmZmVyIDw8PSA2O1xuICAgIGJ1ZmZlciB8PSBhdG9iTG9va3VwKGRhdGFbaV0pO1xuICAgIGFjY3VtdWxhdGVkQml0cyArPSA2O1xuICAgIC8vIFwiSWYgYnVmZmVyIGhhcyBhY2N1bXVsYXRlZCAyNCBiaXRzLCBpbnRlcnByZXQgdGhlbSBhcyB0aHJlZSA4LWJpdFxuICAgIC8vIGJpZy1lbmRpYW4gbnVtYmVycy4gQXBwZW5kIHRocmVlIGJ5dGVzIHdpdGggdmFsdWVzIGVxdWFsIHRvIHRob3NlXG4gICAgLy8gbnVtYmVycyB0byBvdXRwdXQsIGluIHRoZSBzYW1lIG9yZGVyLCBhbmQgdGhlbiBlbXB0eSBidWZmZXIuXCJcbiAgICBpZiAoYWNjdW11bGF0ZWRCaXRzID09PSAyNCkge1xuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGJ1ZmZlciAmIDB4ZmYwMDAwKSA+PiAxNik7XG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoYnVmZmVyICYgMHhmZjAwKSA+PiA4KTtcbiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZmZlciAmIDB4ZmYpO1xuICAgICAgYnVmZmVyID0gYWNjdW11bGF0ZWRCaXRzID0gMDtcbiAgICB9XG4gICAgLy8gXCJBZHZhbmNlIHBvc2l0aW9uIGJ5IDEuXCJcbiAgfVxuICAvLyBcIklmIGJ1ZmZlciBpcyBub3QgZW1wdHksIGl0IGNvbnRhaW5zIGVpdGhlciAxMiBvciAxOCBiaXRzLiBJZiBpdCBjb250YWluc1xuICAvLyAxMiBiaXRzLCB0aGVuIGRpc2NhcmQgdGhlIGxhc3QgZm91ciBhbmQgaW50ZXJwcmV0IHRoZSByZW1haW5pbmcgZWlnaHQgYXNcbiAgLy8gYW4gOC1iaXQgYmlnLWVuZGlhbiBudW1iZXIuIElmIGl0IGNvbnRhaW5zIDE4IGJpdHMsIHRoZW4gZGlzY2FyZCB0aGUgbGFzdFxuICAvLyB0d28gYW5kIGludGVycHJldCB0aGUgcmVtYWluaW5nIDE2IGFzIHR3byA4LWJpdCBiaWctZW5kaWFuIG51bWJlcnMuIEFwcGVuZFxuICAvLyB0aGUgb25lIG9yIHR3byBieXRlcyB3aXRoIHZhbHVlcyBlcXVhbCB0byB0aG9zZSBvbmUgb3IgdHdvIG51bWJlcnMgdG9cbiAgLy8gb3V0cHV0LCBpbiB0aGUgc2FtZSBvcmRlci5cIlxuICBpZiAoYWNjdW11bGF0ZWRCaXRzID09PSAxMikge1xuICAgIGJ1ZmZlciA+Pj0gNDtcbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZmZXIpO1xuICB9IGVsc2UgaWYgKGFjY3VtdWxhdGVkQml0cyA9PT0gMTgpIHtcbiAgICBidWZmZXIgPj49IDI7XG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGJ1ZmZlciAmIDB4ZmYwMCkgPj4gOCk7XG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmZmVyICYgMHhmZik7XG4gIH1cbiAgLy8gXCJSZXR1cm4gb3V0cHV0LlwiXG4gIHJldHVybiBvdXRwdXQ7XG59XG4vKipcbiAqIEEgbG9va3VwIHRhYmxlIGZvciBhdG9iKCksIHdoaWNoIGNvbnZlcnRzIGFuIEFTQ0lJIGNoYXJhY3RlciB0byB0aGVcbiAqIGNvcnJlc3BvbmRpbmcgc2l4LWJpdCBudW1iZXIuXG4gKi9cblxuY29uc3Qga2V5c3RyID1cbiAgXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbmZ1bmN0aW9uIGF0b2JMb29rdXAoY2hyKSB7XG4gIGNvbnN0IGluZGV4ID0ga2V5c3RyLmluZGV4T2YoY2hyKTtcbiAgLy8gVGhyb3cgZXhjZXB0aW9uIGlmIGNoYXJhY3RlciBpcyBub3QgaW4gdGhlIGxvb2t1cCBzdHJpbmc7IHNob3VsZCBub3QgYmUgaGl0IGluIHRlc3RzXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBpbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhdG9iO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abab/lib/atob.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/abab/lib/btoa.js":
/*!***************************************!*\
  !*** ./node_modules/abab/lib/btoa.js ***!
  \***************************************/
/***/ ((module) => {

eval("\n\n/**\n * btoa() as defined by the HTML and Infra specs, which mostly just references\n * RFC 4648.\n */\nfunction btoa(s) {\n  if (arguments.length === 0) {\n    throw new TypeError(\"1 argument required, but only 0 present.\");\n  }\n\n  let i;\n  // String conversion as required by Web IDL.\n  s = `${s}`;\n  // \"The btoa() method must throw an \"InvalidCharacterError\" DOMException if\n  // data contains any character whose code point is greater than U+00FF.\"\n  for (i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 255) {\n      return null;\n    }\n  }\n  let out = \"\";\n  for (i = 0; i < s.length; i += 3) {\n    const groupsOfSix = [undefined, undefined, undefined, undefined];\n    groupsOfSix[0] = s.charCodeAt(i) >> 2;\n    groupsOfSix[1] = (s.charCodeAt(i) & 0x03) << 4;\n    if (s.length > i + 1) {\n      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;\n      groupsOfSix[2] = (s.charCodeAt(i + 1) & 0x0f) << 2;\n    }\n    if (s.length > i + 2) {\n      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;\n      groupsOfSix[3] = s.charCodeAt(i + 2) & 0x3f;\n    }\n    for (let j = 0; j < groupsOfSix.length; j++) {\n      if (typeof groupsOfSix[j] === \"undefined\") {\n        out += \"=\";\n      } else {\n        out += btoaLookup(groupsOfSix[j]);\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Lookup table for btoa(), which converts a six-bit number into the\n * corresponding ASCII character.\n */\nconst keystr =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nfunction btoaLookup(index) {\n  if (index >= 0 && index < 64) {\n    return keystr[index];\n  }\n\n  // Throw INVALID_CHARACTER_ERR exception here -- won't be hit in the tests.\n  return undefined;\n}\n\nmodule.exports = btoa;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJhYi9saWIvYnRvYS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTLEVBQUU7QUFDWDtBQUNBO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BsYXlsaXN0X2FkbWluX25leHRfYXBwLy4vbm9kZV9tb2R1bGVzL2FiYWIvbGliL2J0b2EuanM/MDg2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBidG9hKCkgYXMgZGVmaW5lZCBieSB0aGUgSFRNTCBhbmQgSW5mcmEgc3BlY3MsIHdoaWNoIG1vc3RseSBqdXN0IHJlZmVyZW5jZXNcbiAqIFJGQyA0NjQ4LlxuICovXG5mdW5jdGlvbiBidG9hKHMpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiKTtcbiAgfVxuXG4gIGxldCBpO1xuICAvLyBTdHJpbmcgY29udmVyc2lvbiBhcyByZXF1aXJlZCBieSBXZWIgSURMLlxuICBzID0gYCR7c31gO1xuICAvLyBcIlRoZSBidG9hKCkgbWV0aG9kIG11c3QgdGhyb3cgYW4gXCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIiBET01FeGNlcHRpb24gaWZcbiAgLy8gZGF0YSBjb250YWlucyBhbnkgY2hhcmFjdGVyIHdob3NlIGNvZGUgcG9pbnQgaXMgZ3JlYXRlciB0aGFuIFUrMDBGRi5cIlxuICBmb3IgKGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBsZXQgb3V0ID0gXCJcIjtcbiAgZm9yIChpID0gMDsgaSA8IHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjb25zdCBncm91cHNPZlNpeCA9IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdO1xuICAgIGdyb3Vwc09mU2l4WzBdID0gcy5jaGFyQ29kZUF0KGkpID4+IDI7XG4gICAgZ3JvdXBzT2ZTaXhbMV0gPSAocy5jaGFyQ29kZUF0KGkpICYgMHgwMykgPDwgNDtcbiAgICBpZiAocy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgZ3JvdXBzT2ZTaXhbMV0gfD0gcy5jaGFyQ29kZUF0KGkgKyAxKSA+PiA0O1xuICAgICAgZ3JvdXBzT2ZTaXhbMl0gPSAocy5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4MGYpIDw8IDI7XG4gICAgfVxuICAgIGlmIChzLmxlbmd0aCA+IGkgKyAyKSB7XG4gICAgICBncm91cHNPZlNpeFsyXSB8PSBzLmNoYXJDb2RlQXQoaSArIDIpID4+IDY7XG4gICAgICBncm91cHNPZlNpeFszXSA9IHMuY2hhckNvZGVBdChpICsgMikgJiAweDNmO1xuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3Vwc09mU2l4Lmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodHlwZW9mIGdyb3Vwc09mU2l4W2pdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIG91dCArPSBcIj1cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSBidG9hTG9va3VwKGdyb3Vwc09mU2l4W2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBMb29rdXAgdGFibGUgZm9yIGJ0b2EoKSwgd2hpY2ggY29udmVydHMgYSBzaXgtYml0IG51bWJlciBpbnRvIHRoZVxuICogY29ycmVzcG9uZGluZyBBU0NJSSBjaGFyYWN0ZXIuXG4gKi9cbmNvbnN0IGtleXN0ciA9XG4gIFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG5mdW5jdGlvbiBidG9hTG9va3VwKGluZGV4KSB7XG4gIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgNjQpIHtcbiAgICByZXR1cm4ga2V5c3RyW2luZGV4XTtcbiAgfVxuXG4gIC8vIFRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUiBleGNlcHRpb24gaGVyZSAtLSB3b24ndCBiZSBoaXQgaW4gdGhlIHRlc3RzLlxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abab/lib/btoa.js\n");

/***/ })

};
;